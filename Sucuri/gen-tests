#!/usr/bin/php5
<?php
/*
   +----------------------------------------------------------------------+
   | gen-tests.php                                                        |
   +----------------------------------------------------------------------+
   | Generate test CSV files for the Sucuri Challenge                     |
   +----------------------------------------------------------------------+
   | Author: Gbenga Ojo <gbenga.a.ojo@gmail.com>                          |
   | Origin Date: Feb 13, 2017                                            | 
   +----------------------------------------------------------------------+
 */

$usage_msg = <<<EOT

Usage:
gen-tests TYPE
   TYPE:
   -c, --common:
      generates a CSV file holding common values
   -f, --fringe:
      generates a CSV file holding fringe cases


EOT;

if (count($argv) <= 1) {
   printf($usage_msg);
   exit(0);
}

$prog_name = array_shift($argv);

while (count($argv) > 0) {
   $arg = array_shift($argv);

   if (preg_match('/^-[h|\?]/', $arg)) {
      print($usage_msg);
      exit(0);
   }

   elseif (preg_match('/^-c|^--common/', $arg)) {
      $isFringe = false;
   } elseif (preg_match('/^-f|^--fringe/', $arg)) {
      $isFringe = true;
   } else {
      print($usage_msg);
      exit(0);
   }
      
}

function generateCSV($isFringe) {
   $output = '';

   if (!$isFringe) {
      for ($i = 0; $i < 20; ++$i) {
          $output .= random_str() . ',' . random_timestamp() . ',' . random_groupId() . ',' . random_int() . ',' . random_int() ."\n";
      }
   }

   if ($isFringe) {
      for ($i = 0; $i < 20; ++$i) {
          $output .= random_str(true) . ',' . random_timestamp(true) . ',' . random_groupId(true) . ',' . random_int(true) . ',' . random_int(true) ."\n";
      }
   }

   file_put_contents('input.csv', $output);
}

      
/**
 * generate a (pseudo) random string
 *
 * note that these values are extremely  pseudo-random; i.e., there
 * will be noticeable repitition. However, values should be
 * sufficiently randomized for the challenge purposes
 *
 * @param: (string) keyspace
 * @return: (string)
 */
function random_str($isFringe = false, $keyspace = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+-=./\|{}[]";') {
   $str = '';
   $max = mb_strlen($keyspace, '8bit') - 1;

   for ($i = 0; $i < mt_rand(1, 100); ++$i) {
      $str .= $keyspace[mt_rand(0, $max)];
   }
   
   if (!$isFringe)
      return $str;

   $string[] = $str; // valid
   $string[] = '';   // invalid
   for ($i = 0; $i < 100000; ++$i) {
      $str .= $keyspace[mt_rand(0, $max)];
   }
   $string[] = $str; // invalid (assuming some reasonable length)

   if ($isFringe)
      return $string[mt_rand(0, sizeof($string) - 1)];
}

/**
 * generates a (pseudo) random timestamp, with boundary possibilities
 *
 * @return: (int)
 */
function random_timestamp($isFringe = false) {
   $time[] = time() + 20 * mt_rand(0, 365) * 24 * 3600; // 20 year span; reasonable for this challenge
   $time[] = time() + mt_rand(0, 3000) * mt_rand(0, 365) * 24 * 3600; // 3000 years from now (year 2038 problem on 32 bit machines)
   $time[] = time() + mt_rand(0, 3000) * mt_rand(0, 365) * 24 * 3600; // negative value
   $time[] = 0;
   $time[] = -1;

   if ($isFringe)
      return (int) $time[mt_rand(0, sizeof($time) - 1)];

   return (int) $time[0];
}

/**
 * generates a (pseudo) random integer with boundary possibilities
 *
 * @return: (int)
 */
function random_int($isFringe = false) {
   $rand_val[] = random_str(true, '0123456789');
   $rand_val[] = 0;
   $rand_val[] = -1;
   $rand_val[] = "";

   if ($isFringe)
      return @ (int) $rand_str[mt_rand(0, sizeof($rand_str) - 1)];

   return (int) $rand_val[0];
}

/**
 * generate pseudo random groupId
 *
 * @return (string)
 */
function random_groupId($isFringe = false) {
   $groupId[] = 'foo';
   $groupId[] = 'bar';
   $groupId[] = 'fizz';
   $groupId[] = 'buzz';

   if ($isFringe) {
      $groupId[] = random_str();
      $groupId[] = "";
   }
   return $groupId[mt_rand(0, sizeof($groupId) - 1)];
}


generateCSV($isFringe);
